GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# prediction standard errors on the grid
# predicted values at the grid -- this can be different
# from the data locations
# explicitly this is fHat <- PhiGrid %*% fit$coefficients
PhiGrid <- naturalSplineBasis(sGrid, sKnots)
SE <- predict( fit, newdata = data.frame(PhiGrid),
se.fit=TRUE )
outObject <- list(lmObject = fit,
fHat = SE$fit, SE= SE$se.fit,
GCV = GCV)
return(outObject)
}
naturalSplineBasis <- function(sGrid,
sKnots,
degree = 3,
derivative = 0) {
boundaryKnots<- c( min(sKnots),max(sKnots))
sKnots0<- c( rep( boundaryKnots[1],degree),sort(sKnots),
rep( boundaryKnots[2],degree) )
testRight<- sGrid < min(sKnots)
testLeft <- sGrid > max(sKnots)
basis <- splineDesign(sKnots0, sGrid,
ord= degree+1, outer.ok=TRUE,
derivs=derivative)
# set up constraints to enforce natural BCs.
const <- splineDesign(sKnots0, boundaryKnots, ord = degree+1,
derivs = c(2,2))
qr.const <- qr(t(const))
QBasis<- t(qr.qty( qr.const, t(basis) ))
basis <- QBasis[,-(1:2)]
basis
return( basis )
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:30
sKnots = seq(1,30,length=5000)
function(s, y, sKnots, sGrid=NULL, nGrid=80) {
require(fda)
sKnots <- sort(sKnots)
N <- length(y)
P <- length(sKnots)
Phi <-  naturalSplineBasis(s, sKnots)
if( is.null(sGrid)){
sGrid<- seq( min( s), max(s), length.out=nGrid)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
# fit$coefficents has the OLS coefficients to represent the function
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# the GCV criterion note how the "lm" object is used to
# get the residuals -- they do not have to be recomputed.
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# prediction standard errors on the grid
# predicted values at the grid -- this can be different
# from the data locations
# explicitly this is fHat <- PhiGrid %*% fit$coefficients
PhiGrid <- naturalSplineBasis(sGrid, sKnots)
SE <- predict( fit, newdata = data.frame(PhiGrid),
se.fit=TRUE )
outObject <- list(lmObject = fit,
fHat = SE$fit, SE= SE$se.fit,
GCV = GCV)
return(outObject)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:30
sKnots = seq(1,30,length=5000)
naturalSplinefit=function(s, y, sKnots, sGrid=NULL, nGrid=80) {
require(fda)
sKnots <- sort(sKnots)
N <- length(y)
P <- length(sKnots)
Phi <-  naturalSplineBasis(s, sKnots)
if( is.null(sGrid)){
sGrid<- seq( min( s), max(s), length.out=nGrid)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
# fit$coefficents has the OLS coefficients to represent the function
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# the GCV criterion note how the "lm" object is used to
# get the residuals -- they do not have to be recomputed.
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# prediction standard errors on the grid
# predicted values at the grid -- this can be different
# from the data locations
# explicitly this is fHat <- PhiGrid %*% fit$coefficients
PhiGrid <- naturalSplineBasis(sGrid, sKnots)
SE <- predict( fit, newdata = data.frame(PhiGrid),
se.fit=TRUE )
outObject <- list(lmObject = fit,
fHat = SE$fit, SE= SE$se.fit,
GCV = GCV)
return(outObject)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:30
sKnots = seq(1,30,length=5000)
naturalSplinefit=function(s, y, sKnots, sGrid=NULL, nGrid=80) {
require(fda)
sKnots <- sort(sKnots)
N <- length(y)
P <- length(sKnots)
Phi <-  naturalSplineBasis(s, sKnots)
if( is.null(sGrid)){
sGrid<- seq( min( s), max(s), length.out=nGrid)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
# fit$coefficents has the OLS coefficients to represent the function
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# the GCV criterion note how the "lm" object is used to
# get the residuals -- they do not have to be recomputed.
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# prediction standard errors on the grid
# predicted values at the grid -- this can be different
# from the data locations
# explicitly this is fHat <- PhiGrid %*% fit$coefficients
PhiGrid <- naturalSplineBasis(sGrid, sKnots)
SE <- predict( fit, newdata = data.frame(PhiGrid),
se.fit=TRUE )
outObject <- list(lmObject = fit,
fHat = SE$fit, SE= SE$se.fit,
GCV = GCV)
return(outObject)
}
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:30
b <- 1:20
nGCV = c()
for x in b{
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:30
b <- 1:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit=function(s, y, sKnots, sGrid=NULL, nGrid=80) {
require(fda)
sKnots <- sort(sKnots)
N <- length(y)
P <- length(sKnots)
Phi <-  naturalSplineBasis(s, sKnots)
if( is.null(sGrid)){
sGrid<- seq( min( s), max(s), length.out=nGrid)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
# fit$coefficents has the OLS coefficients to represent the function
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# the GCV criterion note how the "lm" object is used to
# get the residuals -- they do not have to be recomputed.
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# prediction standard errors on the grid
# predicted values at the grid -- this can be different
# from the data locations
# explicitly this is fHat <- PhiGrid %*% fit$coefficients
PhiGrid <- naturalSplineBasis(sGrid, sKnots)
SE <- predict( fit, newdata = data.frame(PhiGrid),
se.fit=TRUE )
outObject <- list(lmObject = fit,
fHat = SE$fit, SE= SE$se.fit,
GCV = GCV)
return(outObject)
}
append(nGCV,GCV)
}
sKnots <- sort(sKnots)
N <- length(y)
P <- length(sKnots)
Phi <-  naturalSplineBasis(s, sKnots)
if( is.null(sGrid)){
sGrid<- seq( min( s), max(s), length.out=nGrid)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
# fit$coefficents has the OLS coefficients to represent the function
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# the GCV criterion note how the "lm" object is used to
# get the residuals -- they do not have to be recomputed.
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
# prediction standard errors on the grid
# predicted values at the grid -- this can be different
# from the data locations
# explicitly this is fHat <- PhiGrid %*% fit$coefficients
PhiGrid <- naturalSplineBasis(sGrid, sKnots)
SE <- predict( fit, newdata = data.frame(PhiGrid),
se.fit=TRUE )
require(fda)
sKnots <- sort(sKnots)
N <- length(y)
P <- length(sKnots)
Phi <-  naturalSplineBasis(s, sKnots)
if( is.null(sGrid)){
sGrid<- seq( min( s), max(s), length.out=nGrid)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
# fit$coefficents has the OLS coefficients to represent the function
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- O3[182:212,]
s <- 1:30
b <- 1:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- O3[182:212,]
s <- 1:30
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- data.frame(O3[182:212,])
s <- 1:30
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- data.frame(unlist(O3[182:212,]))
s <- 1:30
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
View(y)
View(y)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- data.frame(unlist(O3[182:212,]))
s <- 1:30
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
Phi <-  naturalSplineBasis(s, sKnots)
if( is.null(sGrid)){
sGrid<- seq( min( s), max(s), length.out=nGrid)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
# fit$coefficents has the OLS coefficients to represent the function
GCV <- (1 / N) * sum(fit$residuals ^ 2) / (1 - P / N) ^ 2
View(y)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,]
s <- 1:30
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:30
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
# omit intercept beecause it is already included as part of the
# basis
df<- data.frame(Phi)
fit <- lm(y ~ . - 1, data=df)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(30*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGVC,GVC)
}
nGVC = c()
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGCC,GCV)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGCV,GCV)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
fit=naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGCV,GCV)
}
View(fit)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
fit=naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGCV,fit$GCV)
}
View(fit)
View(fit)
View(fit)
View(fit)
append(nGCV, fit$GCV)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
fit=naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
append(nGCV,fit$GCV)
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
fit=naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
nGCV[x]=fit$GCV
}
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
fit=naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
nGCV[x]=fit$GCV
}
plot(nGCV)
fit$lmObject
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
O3<- data.frame( O3)
names( O3)<- paste0("hour",0:23)
y <- unlist(O3[182:212,])
s <- 1:(31*24)
b <- 2:20
nGCV = c()
for (x in b)
{
sKnots = seq(1,30,length=x)
fit=naturalSplinefit(s,y,sKnots, sGrid = NULL, nGrid=80)
nGCV[x]=fit$GCV
}
fit$lmObject
plot(nGCV)
boxplot(O3[182:212,])
sKnots= seq(1,30,length=2)
fit=naturalSplinefit(s,y,sKnots,sGrid=NULL,nGrid = 80)
boxplot(fit$lmObject)
boxplot(O3[182:212,])
sKnots= seq(1,30,length=2)
fit=naturalSplinefit(s,y,sKnots,sGrid=NULL,nGrid = 80)
plot(fit$lmObject)
O3na <- na.omit(O3)
fbplot(O3)
knitr::opts_chunk$set(echo = TRUE)
options(max.print = 3001)
#order(result$depth)
options(max.print = 100)
order(result$depth)
meanSix<- apply(justSix, 2, mean )
